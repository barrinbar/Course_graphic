// first graphics program
#include "GLUT.H"
#include <math.h>
#include <time.h>
#include <stdio.h>

#define HEIGHT 600
#define WIDTH 800

const double PI = 4*atan(1.0);

#define NUM_STARS 200

double stars[NUM_STARS];

double q = 0;
double offset = 0;

// Tank angle
double beta;

double dx = -0.0003;
//double sx=1,sy=1;
//double teta=1.5;

// fire animation
double f = -4;		 // force
double g =-9;		// graviti
bool isFire = 0;	//if clicked
double x_shell,y_shell ,x_0 , y_0 , v_x ,v_y ,t=0;
double shoot_angle;
double dt = 0.0005;	//delta time


//double gamma = 0;
double bx=1,by; // x of bicycle


// add to project properties->configuration ->linker->input
//->additional dependences-> opengl32.lib;glu32.lib;glut.lib;
void init()
{
	int i;
	srand(time(0));
	
	for(i=0;i<NUM_STARS;i++)
		stars[i] = (rand()%1000)/1000.0;
	// set background color
	glClearColor(0.61,0.5,0.9,0);
	glOrtho(-1,1,-1,1,-1,1);
}

void DrawWheel()
{
	double x,y,alpha, offset = PI/10;
	glColor3d(1,1,1);

	// circle
	glBegin(GL_LINE_LOOP);
	for(alpha = 0; alpha <=2*PI; alpha+=offset)
	{
		x = cos(alpha);
		y = sin(alpha);
		glVertex2d(x,y);
	}
	glEnd();

	// lines
	for(alpha = 0; alpha <=2*PI; alpha+=4*offset)
	{
		glBegin(GL_LINE_STRIP);
		x = cos(alpha);
		y = sin(alpha);
		glVertex2d(x,y);
		glVertex2d(0,0);
		x = cos(alpha+offset);
		y = sin(alpha+offset);
		glVertex2d(x,y);
	glEnd();
	}

}

void DrawBackground()
{
	double x,y,c;
	int i;
	// set gradient background
	glBegin(GL_POLYGON);
		glColor3d(0,0,0.5); // dark blue
		glVertex2d(-1,1);
		glVertex2d(1,1);
		glColor3d(0,1,1); // cyan
		glVertex2d(1,-1);
		glVertex2d(-1,-1);
	glEnd();

	// Draw graph
	glColor3d(0.0,0.0,0.0);
	glBegin(GL_LINE_STRIP);
	for(x = -1;x<=1;x+=0.01)
	{
		y= 0.1*sin(x*6);
		glVertex2d(x,y);
	}
	glEnd();
	
	// random stars
	glPointSize(1);
	glColor3d(1,1,0);
	glBegin(GL_POINTS);
	for(i=0;i<NUM_STARS;i++)
		glVertex2d((2*i-NUM_STARS)/((double)NUM_STARS),stars[i]);
	glEnd();

}

void DrawTank()
{
	// draw base wheels
	glLineWidth(2);
	glPushMatrix();
		glTranslated(-0.05,0,0);
		glRotated(offset,0,0,1);
		glScaled(0.05,0.05,1);
		DrawWheel();
	glPopMatrix();
	glPushMatrix();
		glTranslated(-0.15,0,0);
		glRotated(offset,0,0,1);
		glScaled(0.05,0.05,1);
		DrawWheel();
	glPopMatrix();
	glPushMatrix();
		glTranslated(0.05,0,0);
		glRotated(offset,0,0,1);
		glScaled(0.05,0.05,1);
		DrawWheel();
	glPopMatrix();
	glPushMatrix();
		glTranslated(0.15,0,0);
		glRotated(offset,0,0,1);
		glScaled(0.05,0.05,1);
		DrawWheel();
	glPopMatrix();

	//draw upper side wheels
	glPushMatrix();
		glTranslated(0.25,0.1,0);
		glRotated(offset,0,0,1);
		glScaled(0.03,0.03,1);
		DrawWheel();
	glPopMatrix();
	glPushMatrix();
		glTranslated(-0.25,0.1,0);
		glRotated(offset,0,0,1);
		glScaled(0.03,0.03,1);
		DrawWheel();
	glPopMatrix();

	//draw upper middle wheels
	glPushMatrix();
		glTranslated(0,0.1,0);
		glRotated(offset,0,0,1);
		glScaled(0.01,0.01,1);
		DrawWheel();
	glPopMatrix();
	glPushMatrix();
		glTranslated(0.10,0.1,0);
		glRotated(offset,0,0,1);
		glScaled(0.01,0.01,1);
		DrawWheel();
	glPopMatrix();
	glPushMatrix();
		glTranslated(-0.10,0.1,0);
		glRotated(offset,0,0,1);
		glScaled(0.01,0.01,1);
		DrawWheel();
	glPopMatrix();

	// chain
	glColor3d(1,1,1); // white
	glBegin(GL_LINE_LOOP);
		glVertex2d(0.3,0.13);
		glVertex2d(0.2,-0.05);
		glVertex2d(-0.2,-0.05);
		glVertex2d(-0.3,0.13);
	glEnd();

	// steeple
	glColor3d(1,1,1); // white
	glBegin(GL_LINE_LOOP);
		glVertex2d(0.3,0.13);
		glVertex2d(0.2,-0.05);
		glVertex2d(-0.2,-0.05);
		glVertex2d(-0.3,0.13);
	glEnd();
	glBegin(GL_LINE_LOOP);
		glVertex2d(-0.25,0.15);
		glVertex2d(-0.2,0.2);
		glVertex2d(0.2,0.2);
		glVertex2d(0.25,0.15);
	glEnd();
	glBegin(GL_LINE_LOOP);
		glVertex2d(-0.2,0.2);
		glVertex2d(-0.15,0.3);
		glVertex2d(0.15,0.3);
		glVertex2d(0.2,0.2);
	glEnd();
	//cannon
	glBegin(GL_LINE_LOOP);
		glVertex2d(-0.2,0.2);
		glVertex2d(-0.5,0.3);
		glVertex2d(-0.49,0.34);
		glVertex2d(-0.18,0.24);
	glEnd();
}

//draw shell
void drawShell()
	
{	glPushMatrix();	
		glPointSize(5);
		glColor3d(1,1,1);
		glBegin(GL_POINTS);
			glVertex2d(x_shell,y_shell);
		glEnd();
		glPointSize(2);
		// draw flames
		glColor3d(1,0,0);
		glBegin(GL_POINTS);
			glVertex2d(x_shell+0.01,y_shell+0.02);
			glVertex2d(x_shell+0.01,y_shell);
			glVertex2d(x_shell+0.03,y_shell);
			glVertex2d(x_shell+0.01,y_shell-0.02);
		glEnd();
	glPopMatrix();
}

void explode()
{
	double ratio = 0.1;
	double red =1;

	for (int i = 0; i< 3; i++)
	{
		glPushMatrix();
			glBegin(GL_POLYGON);
				glColor3d(red,0,0);
				glVertex2d(x_shell,y_shell+ratio/2);
				glVertex2d(x_shell+ratio,y_shell+ratio);
				glVertex2d(x_shell+ratio/2,y_shell+ratio/2);
				glVertex2d(x_shell+ratio,y_shell);
				glColor3d(red,0.5,0);
				glVertex2d(x_shell+ratio/2,y_shell+ratio/2);
				glVertex2d(x_shell+ratio,y_shell-ratio);
				glVertex2d(x_shell+ratio/2,-y_shell+ratio/2);
				glVertex2d(x_shell-ratio,y_shell-ratio);
				glColor3d(red,0.7,0);
				glVertex2d(x_shell+ratio/2,y_shell);
				glVertex2d(x_shell-ratio,y_shell+ratio);
			glEnd();
		glPopMatrix();
		ratio -= 0.005;
		red -= 0.05;
	}
	ratio = 0.1;
	red = 1;
}
// refresh
void display()
{
	glClear(GL_COLOR_BUFFER_BIT);

	// start of the transformations
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	DrawBackground();

	glPushMatrix();
		glTranslated(-0.2,0.25,0);
	glPopMatrix();

		by = 0.1*sin(bx*6);
		beta = atan(0.1*6*cos(bx*6));

	glPushMatrix();
		// move to start on edge
		if (bx < -1)
			bx = 1;
		glTranslated(bx,by+0.04,0);
		glScaled(0.4,0.4,1);
		glRotated(beta*180/PI,0,0,1);
		DrawTank();
	glPopMatrix();

	if (isFire)
	{
		x_shell = x_0 + v_x*t;
		y_shell = y_0 + v_y*t + g*t*t; 
		drawShell();
	}
	
	// explode when hit the land
	if ( y_shell < 0.1*sin(x_shell*6) )
	{
		isFire = 0;
		explode();
	}
	glutSwapBuffers();
}

void fire()
{
	//beta*180/PI
	double delta;
	double r;
	r = sqrt(0.21*0.21 + 0.18*0.18);
	delta =  atan(0.21/0.18);
	isFire = !isFire;
	if (isFire == 1)
	{
		t=0;
		isFire = -1*isFire;
			x_0 = bx - r*sin(delta+beta);
			y_0 = by + r*cos(delta+beta);
		shoot_angle = 340*PI/180;
		v_x = f*cos(shoot_angle + beta);
		v_y = f*sin(shoot_angle +beta );
	}
	else
	{
		t = 0;
	}
}

void idle()
{
	bx+=dx;
	if (isFire == 1){t+= dt;}
	glutPostRedisplay(); //-> display
}

void mouse(int button, int state, int x, int y)
{
	if(button==GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		fire();
	}
}

void keyboard(unsigned char key, int x, int y)
{
	if (key == VK_SPACE)
	fire();
}

void main( int argc, char* argv[])
{
	// windowing
	glutInit(&argc,argv);
	// GLUT_DOUBLE stands for double buffer
	glutInitDisplayMode(GLUT_RGBA|GLUT_DOUBLE);
	glutInitWindowSize(WIDTH,HEIGHT);
	glutInitWindowPosition(100,100);

	glutCreateWindow("Tank Fire");
	// set refresh function
	glutDisplayFunc(display);
	glutIdleFunc(idle);

	glutMouseFunc(mouse);
	glutKeyboardFunc(keyboard);

	init();

	glutMainLoop();
}
